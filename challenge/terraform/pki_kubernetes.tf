/*
  Important Security Notice

  The private key generated by this resource will be stored unencrypted in your Terraform state file.

  ** Use of this resource for production deployments is not recommended. **

  Instead, generate a private key file outside of Terraform and distribute it securely to the system where Terraform will be run.
*/

// See: https://kubernetes.io/docs/setup/best-practices/certificates/
locals {
  kubernetes_certificates = {
    "apiserver": ["client_auth", "server_auth"],
    "apiserver-kubelet-client": ["client_auth"],
    "admin": ["client_auth"],
    "sa": ["client_auth", "server_auth"],
    "controller-manager": ["client_auth"],
    "scheduler": ["client_auth"],
  }
}

resource "tls_private_key" "kubernetes-key" {
  for_each = toset(concat(["kubernetes-ca"], keys(local.kubernetes_certificates)))

  algorithm = "RSA"
  rsa_bits  = 2048
}

resource "tls_self_signed_cert" "kubernetes-ca" {
  key_algorithm   = tls_private_key.kubernetes-key["kubernetes-ca"].algorithm
  private_key_pem = tls_private_key.kubernetes-key["kubernetes-ca"].private_key_pem

  subject {
    common_name  = "${var.name} kubernetes CA"
    organization = var.name
  }

  validity_period_hours = local.validity_period_hours

  is_ca_certificate = true

  allowed_uses = [
    "cert_signing",
    "crl_signing"
  ]
}

resource "tls_cert_request" "kubernetes-csr" {
  for_each = local.kubernetes_certificates

  key_algorithm   = tls_private_key.kubernetes-key[each.key].algorithm
  private_key_pem = tls_private_key.kubernetes-key[each.key].private_key_pem

  subject {
    common_name  = "${var.name} ${replace(each.key, "-", " ")}"
    organization = var.name
  }
}

resource "tls_locally_signed_cert" "kubernetes-crt" {
  for_each = local.kubernetes_certificates

  ca_key_algorithm   = tls_private_key.kubernetes-key["kubernetes-ca"].algorithm
  ca_private_key_pem = tls_private_key.kubernetes-key["kubernetes-ca"].private_key_pem
  ca_cert_pem        = tls_self_signed_cert.kubernetes-ca.cert_pem

  cert_request_pem   = tls_cert_request.kubernetes-csr[each.key].cert_request_pem

  validity_period_hours = local.validity_period_hours

  allowed_uses = concat([
    "key_encipherment",
    "digital_signature"
  ], each.value)
}
