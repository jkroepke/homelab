apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: cortex
  namespace: argocd
  finalizers:
    - resources-finalizer.argocd.argoproj.io
spec:
  project: default
  source:
    chart: cortex
    repoURL: https://cortexproject.github.io/cortex-helm-chart
    targetRevision: 1.7.0
    helm:
      releaseName: cortex
      parameters:
        - name: image.tag
          value: master-250f7f3
      fileParameters:
        - name: "config.alertmanager_storage.azure.user_assigned_id"
          path: "kubectl://infra-cortex/sa/cortex/jsonpath={.metadata.annotations.azure\\\\.workload\\\\.identity/client-id}"
        - name: "config.ruler_storage.azure.user_assigned_id"
          path: "kubectl://infra-cortex/sa/cortex/jsonpath={.metadata.annotations.azure\\\\.workload\\\\.identity/client-id}"
        - name: "config.blocks_storage.azure.user_assigned_id"
          path: "kubectl://infra-cortex/sa/cortex/jsonpath={.metadata.annotations.azure\\\\.workload\\\\.identity/client-id}"
      #language=yaml
      values: |
        alertmanager:
          enabled: false
        distributor:
          enabled: true
          replicas: 1
          serviceMonitor:
            enabled: true
            additionalLabels:
              release: kube-prometheus-stack

        ingester:
          enabled: true
          replicas: 1
          statefulSet:
            enabled: true
          serviceMonitor:
            enabled: true
            additionalLabels:
              release: kube-prometheus-stack
          podAnnotations:
            azure.workload.identity/inject-proxy-sidecar: "true"
          persistentVolume:
            # semi-stateful
            enabled: true
            # storageClass: jokmspaks
            size: 10Gi
        
        ruler:
          enabled: true
          replicas: 1
          podAnnotations:
            azure.workload.identity/inject-proxy-sidecar: "true"
          serviceMonitor:
            enabled: true
            additionalLabels:
              release: kube-prometheus-stack
        
        querier:
          enabled: true
          replicas: 1
          podAnnotations:
            azure.workload.identity/inject-proxy-sidecar: "true"
          serviceMonitor:
            enabled: true
            additionalLabels:
              release: kube-prometheus-stack
        
        query_frontend:
          enabled: true
          replicas: 1
          serviceMonitor:
            enabled: true
            additionalLabels:
              release: kube-prometheus-stack

        table_manager:
          replicas: 1
          serviceMonitor:
            enabled: true
            additionalLabels:
              release: kube-prometheus-stack
        
        nginx:
          enabled: true
          replicas: 1
        
        store_gateway:
          enabled: true
          persistentVolume:
            enabled: true
            storageClass: jokmspaks
          serviceMonitor:
            enabled: true
            additionalLabels:
              release: kube-prometheus-stack
          podAnnotations:
            azure.workload.identity/inject-proxy-sidecar: "true"
        
        compactor:
          enabled: true
          replicas: 1
          serviceMonitor:
            enabled: true
            additionalLabels:
              release: kube-prometheus-stack
          podAnnotations:
            azure.workload.identity/inject-proxy-sidecar: "true"
          persistentVolume:
            enabled: false
            storageClass: jokmspaks
            size: 10Gi
        
        config:
          auth_enabled: false
          ingester:
            lifecycler:
              ring:
                replication_factor: 1
          alertmanager:
            enable_api: true
            storage: ~
            
          querier:
            at_modifier_enabled: true
            query_store_for_labels_enabled: true
          
          alertmanager_storage:
            backend: azure
            azure:
              account_name: jokmspaks
              container_name: alertmanager
              #user_assigned_id: '{{ get ((lookup "v1" "ServiceAccount" $.Release.Namespace "cortex").metadata.annotations) "azure.workload.identity/client-id" }}'
          ruler:
            enable_api: true
            storage: ~
          
          ruler_storage:
            backend: azure
            azure:
              account_name: jokmspaks
              container_name: ruler
              #user_assigned_id: '{{ get ((lookup "v1" "ServiceAccount" "infra-cortex" "cortex").metadata.annotations) "azure.workload.identity/client-id" }}'
          
          storage:
            index_queries_cache_config: ~
          
          blocks_storage:
            backend: azure
            azure:
              account_name: jokmspaks
              container_name: cortex
              #user_assigned_id: '{{ get ((lookup "v1" "ServiceAccount" $.Release.Namespace "cortex").metadata.annotations) "azure.workload.identity/client-id" }}'

        serviceAccount:
          create: false
          name: cortex

        memcached:
          enabled: false
        memcached-index-read:
          enabled: false
        memcached-index-write:
          enabled: false
        memcached-frontend:
          enabled: false
        memcached-blocks-index:
          architecture: "standalone"
          replicaCount: 1
        memcached-blocks:
          architecture: "standalone"
          replicaCount: 1
        memcached-blocks-metadata:
          architecture: "standalone"
          replicaCount: 1
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - ServerSideApply=false
      - ApplyOutOfSyncOnly=true
      - CreateNamespace=true
    retry:
      limit: 2
      backoff:
        duration: 5s
        factor: 2
        maxDuration: 3m
  destination:
    server: "https://kubernetes.default.svc"
    namespace: infra-cortex
